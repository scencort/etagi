from aiogram import Bot, Dispatcher, F, types
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from aiogram.filters import CommandStart
import asyncio

# üîê –¢–≤–æ–π —Ç–æ–∫–µ–Ω
BOT_TOKEN = "7440614918:AAEtmd41M4rNpCl5etIFwD7fY9QKIlHznuM"
# üßë‚Äçüíº –¢–≤–æ–π Telegram ID
ADMIN_ID = 540311740  # –ó–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ–π ID, –µ—Å–ª–∏ –Ω—É–∂–µ–Ω –¥—Ä—É–≥–æ–π

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# üéõ –ö–Ω–æ–ø–∫–∏ –º–µ–Ω—é
menu_keyboard = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text="üè† –°–æ–∑–¥–∞—Ç—å –æ–±—ä–µ–∫—Ç", callback_data="new_object")],
    [InlineKeyboardButton(text="üìù –°–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É (–ø–æ–∫—É–ø–∫–∞)", callback_data="new_request")],
])

# üìå –°—Ç–∞—Ä—Ç
@dp.message(CommandStart())
async def start(message: Message):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∑–∞—è–≤–∫–∏:", reply_markup=menu_keyboard)

# üßæ –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–æ–∫
@dp.callback_query(F.data == "new_object")
async def object_template(callback: CallbackQuery):
    text = (
        "–ó–∞–ø–æ–ª–Ω–∏ –¥–∞–Ω–Ω—ã–µ –ø–æ —à–∞–±–ª–æ–Ω—É:\n\n"
        "–¢–∏–ø: \n"
        "–î–æ–ª—å—â–∏–∫ (–¥–∞/–Ω–µ—Ç): \n"
        "–ê–¥—Ä–µ—Å: \n"
        "–¶–µ–Ω–∞ (–≤ —Ä—É–±.): \n"
        "–ö–∞–¥–∞—Å—Ç—Ä: \n"
        "–ö–æ–º–Ω–∞—Ç—ã (–°—Ç—É–¥–∏—è, 1–∫, 2–∫ –∏ —Ç.–¥.): \n"
        "–ü–ª–æ—â–∞–¥—å (–º¬≤): \n"
        "–≠—Ç–∞–∂: \n"
        "–ü–æ–¥—ä–µ–∑–¥: \n"
        "–†–µ–º–æ–Ω—Ç (–ë–µ–∑ —Ä–µ–º–æ–Ω—Ç–∞, –ö–æ—Å–º–µ—Ç–∏—á–µ—Å–∫–∏–π, –ï–≤—Ä–æ –∏ —Ç.–¥.): \n"
        "–§–∏–∫—Ç–∏–≤–Ω—ã–π (–¥–∞/–Ω–µ—Ç):"
    )
    await callback.message.answer(text)
    await callback.answer()

@dp.callback_query(F.data == "new_request")
async def request_template(callback: CallbackQuery):
    text = (
        "–ó–∞–ø–æ–ª–Ω–∏ –¥–∞–Ω–Ω—ã–µ –ø–æ —à–∞–±–ª–æ–Ω—É:\n\n"
        "–ó–∞–≥–æ–ª–æ–≤–æ–∫ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ): \n"
        "–¢–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏: –ø–æ–∫—É–ø–∫–∞\n"
        "–¢–µ–ª–µ—Ñ–æ–Ω –∫–ª–∏–µ–Ω—Ç–∞: \n"
        "–ü—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª—å —é—Ä. –ª–∏—Ü–∞/–ò–ü: –¥–∞ (–§–ò–û –∏ –¥–∞–Ω–Ω—ã–µ) / –Ω–µ—Ç\n"
        "–ö—Ç–æ –æ–±—Ä–∞—Ç–∏–ª—Å—è: –∫–ª–∏–µ–Ω—Ç / –∞–≥–µ–Ω—Ç\n"
        "–í–∏–¥ –∑–∞—è–≤–∫–∏: –æ–±—ã—á–Ω–∞—è / –º–µ–∂—Ä–µ–≥–∏–æ–Ω–∞–ª—å–Ω–∞—è\n"
        "–ö–ª–∞—Å—Å –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏: –∫–≤–∞—Ä—Ç–∏—Ä—ã / –≥–∞—Ä–∞–∂–∏ / –∫–æ–º–º–µ—Ä—á–µ—Å–∫–∞—è / –∑–∞–≥–æ—Ä–æ–¥–Ω–∞—è\n"
        "–ù–æ–≤–æ—Å—Ç—Ä–æ–π–∫–∞: –¥–∞ / –Ω–µ—Ç\n"
        "–¢–∏–ø –æ–±—ä–µ–∫—Ç–∞: –∫–≤–∞—Ä—Ç–∏—Ä–∞ / –ø–∞–Ω—Å–∏–æ–Ω–∞—Ç / –º–∞–ª–æ—Å–µ–º–µ–π–∫–∞ / –æ–±—â–µ–∂–∏—Ç–∏–µ –∏ —Ç.–¥.\n"
        "–†–∞–π–æ–Ω: \n"
        "–ò—Å—Ç–æ—á–Ω–∏–∫ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –ø–æ–∫—É–ø–∫—É: –∏–ø–æ—Ç–µ–∫–∞ / –º–∞—Ç–µ—Ä–∏–Ω—Å–∫–∏–π –∫–∞–ø–∏—Ç–∞–ª –∏ —Ç.–¥.\n"
        "–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –¥–∞—Ç–∞ –ø–æ–∫—É–ø–∫–∏: –≤ —Ç–µ—á–µ–Ω–∏–µ –º–µ—Å—è—Ü–∞ / 2-—Ö / 3-—Ö –º–µ—Å—è—Ü–µ–≤\n"
        "–¶–µ–Ω–∞: –æ—Ç ... –¥–æ ...\n"
        "–û–±—â–∞—è –ø–ª–æ—â–∞–¥—å: –æ—Ç ... –¥–æ ... –º¬≤\n"
        "–†–µ–º–æ–Ω—Ç: \n"
        "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–Ω–∞—Ç: \n"
        "–ì–æ–¥ –ø–æ—Å—Ç—Ä–æ–π–∫–∏: –æ—Ç ... –¥–æ ..."
    )
    await callback.message.answer(text)
    await callback.answer()

# üì® –û–±—Ä–∞–±–æ—Ç–∫–∞ –ª—é–±—ã—Ö –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö —à–∞–±–ª–æ–Ω–æ–≤
@dp.message()
async def handle_filled_template(message: Message):
    lines = message.text.strip().split("\n")
    formatted = ""
    for line in lines:
        if ":" in line:
            formatted += f"{line.strip()}\n"
    if formatted:
        await bot.send_message(ADMIN_ID, f"üÜï –ó–∞—è–≤–∫–∞:\n\n{formatted}")
        await message.answer("‚úÖ –ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!")
    else:
        await message.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —à–∞–±–ª–æ–Ω. –£–±–µ–¥–∏—Å—å, —á—Ç–æ –∫–∞–∂–¥–∞—è —Å—Ç—Ä–æ–∫–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç `–∫–ª—é—á: –∑–Ω–∞—á–µ–Ω–∏–µ`.")

# üöÄ –ó–∞–ø—É—Å–∫
async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())